AWSTemplateFormatVersion: 2010-09-09
Description: Instance for ad-hoc work

Parameters:
  AmiIdx86:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
  AmiIdArm:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-arm64'
  Architecture:
    Type: String
    AllowedValues:
      - arm64
      - x86_64
    Default: x86_64

Conditions:
  IsArm: !Equals [!Ref Architecture, arm64]

Resources:
  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub Security group for ${AWS::StackName}
      GroupName: !Sub ${AWS::StackName}-sg
      VpcId: !ImportValue infra-vpc-VpcId
      Tags:
        - { Key: Name, Value: !Sub '${AWS::StackName}-sg' }

  Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
      Path: /
      RoleName: !Sub ${AWS::StackName}-role
      Policies:
        - PolicyName: ExtraAccess
          PolicyDocument: {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Sid": "EKSAccess",
                      "Effect": "Allow",
                      "Action": [
                          "eks:DescribeCluster"
                      ],
                      "Resource": "*"
                  }
              ]
          }

  RoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Role
      InstanceProfileName: !Sub '${AWS::StackName}-profile'

  LaunchTemplate:
    Type: "AWS::EC2::LaunchTemplate"
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-template
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              Encrypted: true
              VolumeSize: 100
              VolumeType: gp3
        IamInstanceProfile:
          Arn: !GetAtt RoleProfile.Arn
        ImageId: !If [IsArm, !Ref AmiIdArm, !Ref AmiIdx86]
        InstanceType: !If [IsArm, m6g.xlarge, m6i.xlarge]
        KeyName: sjakthol
        SecurityGroupIds:
          - !Ref SecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - { Key: Name, Value: !Sub '${AWS::StackName}' }
          - ResourceType: volume
            Tags:
              - { Key: Name, Value: !Sub '${AWS::StackName}-volume' }
        UserData:
          Fn::Base64: !Sub
          - |
            #!/bin/bash
            set -o xtrace

            # Install some tools
            dnf install -y docker make git patch tmux htop iotop parallel amazon-ecr-credential-helper python3-pip

            # Setup Docker
            systemctl start docker
            usermod -aG docker ec2-user
            sudo -u ec2-user mkdir -p /home/ec2-user/.docker
            echo '{"credsStore": "ecr-login"}' | sudo -u ec2-user tee /home/ec2-user/.docker/config.json

            # Upgrade pip
            python3 -m pip install --upgrade pip

            # Install some Python dev tools
            python3 -m pip install --upgrade poetry tox

            # Install AWS CLI v2
            curl -sSfL --retry 3 "https://awscli.amazonaws.com/awscli-exe-linux-${AwsCliArch}.zip" -o "awscliv2.zip" \
              && unzip -q awscliv2.zip \
              && ./aws/install \
              && rm -rf ./aws awscliv2.zip

            # Install Docker buildx
            mkdir -p /usr/local/lib/docker/cli-plugins
            curl -sSfL --retry 3 "https://github.com/docker/buildx/releases/download/v0.9.1/buildx-v0.9.1.linux-${GoArch}" -o /usr/local/lib/docker/cli-plugins/docker-buildx
            chmod a+x /usr/local/lib/docker/cli-plugins/docker-buildx

            # Install kubectl
            curl -sSfL --retry 3 -o /usr/local/bin/kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.24.7/2022-10-31/bin/linux/${GoArch}/kubectl
            chmod +x /usr/local/bin/kubectl

          - AwsCliArch: !If [IsArm, aarch64, x86_64]
            GoArch: !If [IsArm, arm64, amd64]

  Instance:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: '0'
      MaxSize: '1'
      DesiredCapacity: '1'
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandBaseCapacity: 0 # set to 1 to get on-demand
          OnDemandPercentageAboveBaseCapacity: 0
          SpotAllocationStrategy: capacity-optimized
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate
            Version: !GetAtt LaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: !If [IsArm, m6g.xlarge, m6i.xlarge]
            - InstanceType: !If [IsArm, r6g.xlarge, r6i.xlarge]
            - InstanceType: !If [IsArm, c6g.xlarge, c6i.xlarge]
      VPCZoneIdentifier:
        - !ImportValue infra-vpc-sn-public-a
        - !ImportValue infra-vpc-sn-public-b
