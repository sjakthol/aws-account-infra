AWSTemplateFormatVersion: 2010-09-09
Description: Subnets for infra VPC

Parameters:
  PublicACidr:
    Description: The CIDR for the public subnet in the first AZ
    Type: String
    Default: '10.0.1.0/24'
    AllowedPattern : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : 'must be a valid CIDR range of the form x.x.x.x/x.'

  PublicBCidr:
    Description: The CIDR for the public subnet in the second AZ
    Type: String
    Default: '10.0.2.0/24'
    AllowedPattern : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : 'must be a valid CIDR range of the form x.x.x.x/x.'

  PrivateACidr:
    Description: The CIDR for the private subnet in the first AZ
    Type: String
    Default: '10.0.3.0/24'
    AllowedPattern : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : 'must be a valid CIDR range of the form x.x.x.x/x.'

  PrivateBCidr:
    Description: The CIDR for the private subnet in the first AZ
    Type: String
    Default: '10.0.4.0/24'
    AllowedPattern : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : 'must be a valid CIDR range of the form x.x.x.x/x.'

  NatACidr:
    Description: The CIDR for the Nat subnet in the first AZ
    Type: String
    Default: '10.0.5.0/24'
    AllowedPattern : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : 'must be a valid CIDR range of the form x.x.x.x/x.'

  NatBCidr:
    Description: The CIDR for the Nat subnet in the first AZ
    Type: String
    Default: '10.0.6.0/24'
    AllowedPattern : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription : 'must be a valid CIDR range of the form x.x.x.x/x.'

Resources:
  ## Public subnets ##
  PublicA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Ref PublicACidr
      MapPublicIpOnLaunch: True
      Tags:
        - { Key: Name, Value: !Sub '${AWS::StackName}-public-a' }
      VpcId:
        Fn::ImportValue: infra-vpc-VpcId

  PublicART:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Fn::ImportValue: infra-vpc-PublicRouteTable
      SubnetId: !Ref PublicA

  PublicB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Ref PublicBCidr
      MapPublicIpOnLaunch: True
      Tags:
        - { Key: Name, Value: !Sub '${AWS::StackName}-public-b' }
      VpcId:
        Fn::ImportValue: infra-vpc-VpcId
  PublicBRT:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Fn::ImportValue: infra-vpc-PublicRouteTable
      SubnetId: !Ref PublicB

  ## Private Subnets ##
  PrivateA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Ref PrivateACidr
      MapPublicIpOnLaunch: False
      Tags:
        - { Key: Name, Value: !Sub '${AWS::StackName}-private-a' }
      VpcId:
        Fn::ImportValue: infra-vpc-VpcId

  PrivateART:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Fn::ImportValue: infra-vpc-PrivateRouteTable
      SubnetId: !Ref PrivateA

  PrivateB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Ref PrivateBCidr
      MapPublicIpOnLaunch: True
      Tags:
        - { Key: Name, Value: !Sub '${AWS::StackName}-private-b' }
      VpcId:
        Fn::ImportValue: infra-vpc-VpcId
  PrivateBRT:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Fn::ImportValue: infra-vpc-PrivateRouteTable
      SubnetId: !Ref PrivateB

  ## Nat Subnets ##
  NatA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: !Ref NatACidr
      MapPublicIpOnLaunch: False
      Tags:
        - { Key: Name, Value: !Sub '${AWS::StackName}-nat-a' }
      VpcId:
        Fn::ImportValue: infra-vpc-VpcId

  NatART:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Fn::ImportValue: infra-vpc-NatARouteTable
      SubnetId: !Ref NatA

  NatB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: !Ref NatBCidr
      MapPublicIpOnLaunch: True
      Tags:
        - { Key: Name, Value: !Sub '${AWS::StackName}-nat-b' }
      VpcId:
        Fn::ImportValue: infra-vpc-VpcId
  NatBRT:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId:
        Fn::ImportValue: infra-vpc-NatBRouteTable
      SubnetId: !Ref NatB

Outputs:
  PublicA:
    Description: ID of the public subnet in first AZ
    Value: !Ref PublicA
    Export:
      Name: infra-vpc-sn-public-a

  PublicB:
    Description: ID of the public subnet in second AZ
    Value: !Ref PublicB
    Export:
      Name: infra-vpc-sn-public-b

  PrivateA:
    Description: ID of the private subnet in first AZ
    Value: !Ref PrivateA
    Export:
      Name: infra-vpc-sn-private-a

  PrivateB:
    Description: ID of the private subnet in second AZ
    Value: !Ref PrivateB
    Export:
      Name: infra-vpc-sn-private-b

  NatA:
    Description: ID of the NAT subnet in first AZ
    Value: !Ref NatA
    Export:
      Name: infra-vpc-sn-nat-a

  NatB:
    Description: ID of the NAT subnet in second AZ
    Value: !Ref NatB
    Export:
      Name: infra-vpc-sn-nat-b
